//
// Created by wankai on 2020/7/16.
//

#ifndef IMAGE_RETRIEVAL_IMDB_SDK_H
#define IMAGE_RETRIEVAL_IMDB_SDK_H

#include <string>
#include <iostream>
#include <vector>

#ifdef __cplusplus
#ifdef WINDOWS
#ifdef API_EXPORT_DLL
#define API_EXPORT extern "C" __declspec(dllexport)
#else
#define API_EXPORT extern "C" __declspec(dllimport)
#endif
#else
#define API_EXPORT extern "C"
#endif
#else
#define API_EXPORT
#endif
/***************************************************************
@Function: query_result struct
@Description: query_result includes the set id and confidence's score
****************************************************************/
struct query_result
{
    int get_id;
    float confidence;
};
/***************************************************************
@Function: initDataBase
@Description: Database initialization
              This function read parameters from voc_path and _pattern_file, and allocate resources
              for the database. It should be called multi times and return pointer to instance for each time.

@voc_path: The path of voc file. It can be found in the config folder.
@pattern_file: The path of pattern file. It can be found in the config folder.
@config_file: The full path of a yaml file which include paremeters of device and algorithm.

@Return: Pointer of DataBase
****************************************************************/
API_EXPORT void* initDataBase(std::string voc_path, std::string pattern_file);

/***************************************************************
@Function: addImage
@Description: Add image to database
              This function is to build up the database with img_path as input.

@handler: The pointer of the database.
@img_path: the path of image file.
@set_id: the corresponding set id of the input image.

@Return: null
****************************************************************/
API_EXPORT void addImage(void* handler, const std::string &img_path, int set_id);

/***************************************************************
@Function: query_list
@Description: Query the set id with data stream
              This function gets the the pointer of data stream with size. It will return the query result

@handler: The pointer of the database.
@pData: The data stream generated by the devices with starkit3.0.
@nWidth: The width of the image.
@nWidth: The height of the image.
@nWidth: The number of the images.

@Return: The result contains the set id and the score of confidence.
****************************************************************/
API_EXPORT query_result query_list(void* handler, const char* pData, int nWidth, int nHeight, int numFrame);

/***************************************************************
@Function: erase
@Description: Delete the image in dataset.
              This function deletes the image with index.

@handler: The pointer of the database.
@id: The index of the image.

@Return: True if success, false otherwise.
****************************************************************/
API_EXPORT bool erase(void* handler, int id);

/***************************************************************
@Function: erase_set
@Description: Delete the images with input set_id in dataset.
              This function deletes the image with set_id.
              WARNING:Not Recommend use this function since it's time consuming if the database is large.

@handler: The pointer of the database.
@id: The index of the image set.

@Return: True if success, false otherwise.
****************************************************************/
API_EXPORT bool erase_set(void* handler, int set_id);

/***************************************************************
@Function: releaseDataBase
@Description: Release the database
              This function release the database with pointer.

@handler: The pointer of the database.

@Return: True if success, false otherwise.
****************************************************************/
API_EXPORT bool releaseDataBase(void* handler);

#endif //IMAGE_RETRIEVAL_IMDB_SDK_H
